Lab | Bash

Introduction:

In this lab we are going to practice with bash, a shell and command-line language!

Setup
    Fork the repo in your git hub account and then clone the folder "lab-bash" to your machine and navigate to it folder.
    Check the contents of the folder using the "ls" command

$ ls
and you should see the following:
exercises  inputs  lorem  lorem-copy  modules  outputs  README.md

    Stay in the same directory/folder and complete the following exercises.

Exercises:

    Using the echo command print in console "Hello World". 
    Here is some info about echo command [https://discuss.codecademy.com/t/what-are-practical-uses-of-the-echo-command/394788]
    Create a new directory called new_dir.
    Delete/Remove the directory new_dir.
    Copy the file sed.txt from the lorem folder and paste it to the folder lorem-copy folder.
    Copy the other two files from the lorem folder to lorem-copy folder in just one line using semicolon ;.
    Show the sed.txt file content from the lorem folder.
    Show the at.txt file and lorem.txt file contents from lorem folder.
    Print the first 3 rows in sed.txt file from lorem-copy folder.
    Print the last 3 rows in sed.txt file from lorem-copy folder.
    Add Homo homini lupus. at the end of sed.txt file in the lorem-copy folder.
    Print the last 3 rows in sed.txt file from lorem-copy folder. You should see Homo homini lupus..
    sed command is used to replace the text in a file. 
    Use the sed command to replace all occurances of et with ET in the file at.txt file present in the folder lorem. 
    You can use the following link to refer to sed commands [https://www.linode.com/docs/guides/manipulate-text-from-the-command-line-with-sed/] 
    Check the contents of the sed.txt file using cat command.
    Find who is the system user.
    Find the current path of the directory you are in.
    List all files with the extension .txt in lorem folder.
    Count the rows in sed.txt file from lorem folder. Look concatenate cat and wc with the pipe |.
    Count the files which start with lorem in all directories.

Bonus:

    Store your name in a variable with read command.
    Print that variable.
    Create a new directory named with variable name.
    Remove that directory.






Lab | Git
Introduction

Being able to use both, git and GitHub, is an important skill every software/data engineer must possess. 
This is even more important when it comes to its ability to handle code in collaborative projects. This lab will help you learn how use it. 
This lab will help you learn how to use it and understand its importance better.
Instructions

    First of all, install git if you don't have it yet, and create a GitHub account. 
    (In case you haven't made it to the bonus section in the Prework, refer to the lesson "Install Git and Create GitHub Account", 
    that you will find there. Follow the guidelines given there. Additionally, you can use these resources: Install git, Version control with git)

    Create a new repository in GitHub. Name it Iron+ your name. Example: if your name is Alvaro, you will name the repo IronAlvaro.

    Clone that repo to your computer.

    Create a file in that folder. Name it about.txt and add a fun fact about yourself. (You can use the command line: touch nameOfTheFile.txt).

    Add the file you just created to git.

    Commit the change.

    Push the changes to the GitHub and check your repository to make sure everything is there.

Great! This was pretty smooth, we hope.

Now let's practice the collaboration part.
Pair Programming exercise

Pair yourself with a classmate. Send the link to your repository on GitHub to your pair via Slack. Now each of you should perform the following set of actions:

    Fork the classmate's repository.
    Clone it so you have it locally and you can make changes.
    Create a new branch named classmate.
    Create a new file with your name (ex. maya.txt) and finish the following sentence I enrolled Ironhack's Data Analytics bootcamp because.... 
    When you are done, save the changes.
    Add the changes to git.
    Commit and push changes. Now, all the changes should be on your GitHub inside the forked repository.
    Create a pull request to make changes appear in the original repository.
    Merge the branch your classmate created and now everyone's repos should have the original file (about.txt) as well as the new one with your classmate's name.

We hope you enjoyed this activity and learned something new about your classmates! 
